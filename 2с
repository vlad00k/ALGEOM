#include <stdio.h>
#include <locale.h>

typedef struct
{
    int x;
    int y;
    int z;
} vector_3d;

int scolar_mult(vector_3d v1, vector_3d v2);
vector_3d vect_mult(vector_3d v1, vector_3d v2);
int is_null_vector(vector_3d v);
void get_a_b_coefs(vector_3d v1, vector_3d v2, vector_3d v3, float* a, float* b);
int is_collinear(vector_3d v1, vector_3d v2);
int is_complanar(vector_3d v1, vector_3d v2, vector_3d v3, int info);
int get_rank(vector_3d v1, vector_3d v2, vector_3d v3);

vector_3d vect_mult(vector_3d v1, vector_3d v2)
{
    vector_3d result_vector;
    result_vector.x = v1.y * v2.z - v1.z * v2.y;
    result_vector.y = v1.z * v2.x - v1.x * v2.z;
    result_vector.z = v1.x * v2.y - v1.y * v2.x;
    return result_vector;
}

int scolar_mult(vector_3d v1, vector_3d v2)
{
    return v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;
}

int is_null_vector(vector_3d v)
{
    if (v.x == 0 && v.y == 0 && v.z == 0)
        return 1;
    return 0;
}

void get_a_b_coefs(vector_3d v1, vector_3d v2, vector_3d v3, float* a, float* b)
{
    // Эта функция вычисляет коэффициенты а и b для системы  a * v1 + b * v2  = v3
    /*
    Решение системы:
    ax1 + bx2 = x3
    ay1 + by2 = y3
    az1 + bz2 = z3

   */
    int a_denominator, a_numerator, b_numerator;
    float b_denominator;
    if (v1.x != 0 && (v2.y != 0 || v2.z != 0))
    {
        if (v2.y != 0)
        {
            a_denominator = v3.x * v2.y - v3.y * v2.x;
            a_numerator = v1.x * v2.y - v1.y * v2.x;
            *a = (float)a_denominator / (float)a_numerator;
            b_denominator = v3.y - *a * v1.y;
            b_numerator = v2.y;
        }
        else
        {
            a_denominator = v3.x * v2.z - v3.z * v2.x;
            a_numerator = v1.x * v2.z - v1.z * v2.x;
            *a = (float)a_denominator / (float)a_numerator;
            b_denominator = v3.z - *a * v1.z;
            b_numerator = v2.z;
        }
    }
    else if (v1.y != 0 && (v2.x != 0 || v2.z != 0))
    {
        if (v2.x != 0)
        {
            a_denominator = v3.y * v2.x - v3.x * v2.y;
            a_numerator = v1.y * v2.x - v1.x * v2.y;
            *a = (float)a_denominator / (float)a_numerator;
            b_denominator = v3.x - *a * v1.x;
            b_numerator = v2.x;
        }
        else
        {
            a_denominator = v3.y * v2.z - v3.z * v2.y;
            a_numerator = v1.y * v2.z - v1.z * v2.y;
            *a = (float)a_denominator / (float)a_numerator;
            b_denominator = v3.z - *a * v1.z;
            b_numerator = v2.z;
        }
    }
    else
    {
        if (v2.y != 0)
        {
            a_denominator = v3.z * v2.y - v3.y * v2.z;
            a_numerator = v1.z * v2.y - v1.y * v2.z;
            *a = (float)a_denominator / (float)a_numerator;
            b_denominator = v3.y - *a * v1.y;
            b_numerator = v2.y;
        }
        else
        {
            a_denominator = v3.z * v2.x - v3.x * v2.z;
            a_numerator = v1.z * v2.x - v1.x * v2.z;
            *a = (float)a_denominator / (float)a_numerator;
            b_denominator = v3.x - *a * v1.x;
            b_numerator = v2.x;
        }
    }
    *b = (float)b_denominator / (float)b_numerator;
}

int is_complanar(vector_3d v1, vector_3d v2, vector_3d v3, int info)
{
    if (is_null_vector(v1) || is_null_vector(v2) || is_null_vector(v3))
        return 1;

    if (scolar_mult(v1, vect_mult(v2, v3)) == 0)  // Если scolar_mult == 0: v1 является частью диапазона v2 и v3
    {
        if (!is_collinear(v1, v2) && !is_collinear(v1, v3))  // Если нет коллинеарных векторов, мы можем найти линейную комбинацию
        {
            if (info)
            {
                float a, b;
                get_a_b_coefs(v1, v2, v3, &a, &b);
                printf("Линейная комбинация: %.2f * %d %d %d + %.2f * %d %d %d = %d %d %d\n",
                a, v1.x, v1.y, v1.z, b, v2.x, v2.y, v2.z, v3.x, v3.y, v3.z);
            }
        }
        return 1;
    }
    return 0;
}

int is_collinear(vector_3d v1, vector_3d v2)
{
    if (is_null_vector(v1))  // нулевой вектор не коллинеарен ничему
        return 0;
    if (is_null_vector(v2))  // нулевой вектор не коллинеарен ничему
        return 0;
    vector_3d result = vect_mult(v1, v2);
    if (result.x == 0 && result.y == 0 && result.z == 0)
    {
        float ratio;
		if (v1.x != 0 && v2.x != 0)
			ratio = (float)v1.x / (float)v2.x;
		else if (v1.y != 0 && v2.y != 0)
			ratio = (float)v1.y / (float)v2.y;
		else
			ratio = (float)v1.z / (float)v2.z;
        printf("Вектор: %d, %d, %d и Вектор: %d, %d, %d коллениарны, коэффициент = %f\n",
                v1.x, v1.y, v1.z, v2.x, v2.y, v2.z, ratio);
        return 1;
    }
    return 0;
}

int get_rank(vector_3d v1, vector_3d v2, vector_3d v3)
{
    if (is_null_vector(v1) && is_null_vector(v2) && is_null_vector(v3))
        return 0;
    if (is_collinear(v1, v2) && is_collinear(v1, v3))
        return 1;
    else if (is_collinear(v1, v2) || is_collinear(v1, v3) || is_collinear(v2, v3))
        return 2;
    else
        if (is_complanar(v1, v2, v3, 0))
            return 2;
    return 3;
}

int main(int args, char* argv[])
{
    setlocale(LC_ALL, "Rus");
    vector_3d v1, v2, v3;

    printf("Координаты в формате 1-ого вектора x1 y1 z1:");
    scanf("%d %d %d", &v1.x, &v1.y, &v1.z);
    printf("Координаты в формате 2-ого вектора x2 y2 z2:");
    scanf("%d %d %d", &v2.x, &v2.y, &v2.z);
    printf("Координаты в формате 3-ого вектора x3 y3 z3:");
    scanf("%d %d %d", &v3.x, &v3.y, &v3.z);
    if (is_complanar(v1, v2, v3, 1))
        printf("Векторы компланарны\n");
    else
        printf("Векторы не компланарны\n");
    int rank = get_rank(v1, v2, v3);
    printf("Ранг системы равен %d\n", rank);

    return 0;
}
